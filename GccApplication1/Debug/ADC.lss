
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000007c2  00000836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015ac  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a23  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a35  00000000  00000000  000029df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00003414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c9  00000000  00000000  00003678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000093d  00000000  00000000  00003b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000447e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>
  8a:	0c 94 df 03 	jmp	0x7be	; 0x7be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#endif

#if ADC_VOLTAGE_REFRENCE  ==   ADC_Internal_Voltage


SET_BIT (ADMUX , 6) ;
  92:	3e 9a       	sbi	0x07, 6	; 7

SET_BIT (ADMUX , 7) ;
  94:	3f 9a       	sbi	0x07, 7	; 7
#endif


#if ADC_ADJUSCENT      ==       ADC_LEFT_ADJUST

SET_BIT(ADMUX , 5 ) ;
  96:	3d 9a       	sbi	0x07, 5	; 7

//MODE
#if ADC_CONVERSION_TRIGGER ==   ADC_Auto_TRIGGER


SET_BIT ( ADCSRA, 5 );
  98:	35 9a       	sbi	0x06, 5	; 6

#endif

#if ADC_PRESCALER     ==        ADC_PRES_128

SET_BIT(ADCSRA , 0);
  9a:	30 9a       	sbi	0x06, 0	; 6

SET_BIT(ADCSRA , 1);
  9c:	31 9a       	sbi	0x06, 1	; 6

SET_BIT(ADCSRA , 2);
  9e:	32 9a       	sbi	0x06, 2	; 6



#if ADC_INTERRUPT ==  ADC_INTERRUPT_ENABLE

SET_BIT (ADCSRA,3);
  a0:	33 9a       	sbi	0x06, 3	; 6
#endif


#if ADC_SIFOR    ==      Timer_Counter1_CaptureEvent

(SIFOR,7);
  a2:	80 b7       	in	r24, 0x30	; 48




//ADC ENABLE 
SET_BIT (ADCSRA , 7 ); 
  a4:	37 9a       	sbi	0x06, 7	; 6
  a6:	08 95       	ret

000000a8 <ADC_Read>:
void ADC_Read (uint16* value )
{
	uint16 Digital_Value = 0 ; 	
  
  // START CONVERSION 
  SET_BIT(ADCSRA , 6 );
  a8:	36 9a       	sbi	0x06, 6	; 6
  
  #if ADC_INTERRUPT_DISABLE == ADC_INTERRUPT_DISSABLE 
while ( ! GET_BIT (ADCSRA , 4)) ; 
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_Read+0x2>

// ACESS 16 BIT NOT USING BITWISE 
Digital_Value = ADC_Adjust ;
  ae:	64 b1       	in	r22, 0x04	; 4

*value = ((Digital_Value * 500) / 1024 ) ; 
  b0:	44 ef       	ldi	r20, 0xF4	; 244
  b2:	51 e0       	ldi	r21, 0x01	; 1
  b4:	64 9f       	mul	r22, r20
  b6:	90 01       	movw	r18, r0
  b8:	65 9f       	mul	r22, r21
  ba:	30 0d       	add	r19, r0
  bc:	11 24       	eor	r1, r1
  be:	23 2f       	mov	r18, r19
  c0:	26 95       	lsr	r18
  c2:	26 95       	lsr	r18
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	11 82       	std	Z+1, r1	; 0x01
  ca:	08 95       	ret

000000cc <DIO_SetPinDir>:

			break;

		case DIO_PORTD :

			*Val = PIND;
  cc:	44 23       	and	r20, r20
  ce:	b9 f1       	breq	.+110    	; 0x13e <DIO_SetPinDir+0x72>
  d0:	41 30       	cpi	r20, 0x01	; 1
  d2:	09 f0       	breq	.+2      	; 0xd6 <DIO_SetPinDir+0xa>
  d4:	6b c0       	rjmp	.+214    	; 0x1ac <DIO_SetPinDir+0xe0>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	89 f0       	breq	.+34     	; 0xfc <DIO_SetPinDir+0x30>
  da:	28 f0       	brcs	.+10     	; 0xe6 <DIO_SetPinDir+0x1a>
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	c9 f0       	breq	.+50     	; 0x112 <DIO_SetPinDir+0x46>
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	11 f1       	breq	.+68     	; 0x128 <DIO_SetPinDir+0x5c>
  e4:	08 95       	ret
  e6:	2a b3       	in	r18, 0x1a	; 26
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDir+0x26>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDir+0x22>
  f6:	82 2b       	or	r24, r18
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	08 95       	ret
  fc:	27 b3       	in	r18, 0x17	; 23
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPinDir+0x3c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPinDir+0x38>
 10c:	82 2b       	or	r24, r18
 10e:	87 bb       	out	0x17, r24	; 23
 110:	08 95       	ret
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinDir+0x52>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinDir+0x4e>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SetPinDir+0x68>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SetPinDir+0x64>
 138:	82 2b       	or	r24, r18
 13a:	81 bb       	out	0x11, r24	; 17
 13c:	08 95       	ret
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 f0       	breq	.+36     	; 0x166 <DIO_SetPinDir+0x9a>
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_SetPinDir+0x82>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	d9 f0       	breq	.+54     	; 0x17e <DIO_SetPinDir+0xb2>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	29 f1       	breq	.+74     	; 0x196 <DIO_SetPinDir+0xca>
 14c:	08 95       	ret
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDir+0x8e>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDir+0x8a>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	8a bb       	out	0x1a, r24	; 26
 164:	08 95       	ret
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDir+0xa6>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDir+0xa2>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	87 bb       	out	0x17, r24	; 23
 17c:	08 95       	ret
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDir+0xbe>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDir+0xba>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	84 bb       	out	0x14, r24	; 20
 194:	08 95       	ret
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinDir+0xd6>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinDir+0xd2>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	81 bb       	out	0x11, r24	; 17
 1ac:	08 95       	ret

000001ae <DIO_WritePin>:
 1ae:	44 23       	and	r20, r20
 1b0:	b9 f1       	breq	.+110    	; 0x220 <DIO_WritePin+0x72>
 1b2:	41 30       	cpi	r20, 0x01	; 1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <DIO_WritePin+0xa>
 1b6:	6b c0       	rjmp	.+214    	; 0x28e <DIO_WritePin+0xe0>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	89 f0       	breq	.+34     	; 0x1de <DIO_WritePin+0x30>
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <DIO_WritePin+0x1a>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	c9 f0       	breq	.+50     	; 0x1f4 <DIO_WritePin+0x46>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	11 f1       	breq	.+68     	; 0x20a <DIO_WritePin+0x5c>
 1c6:	08 95       	ret
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_WritePin+0x26>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_WritePin+0x22>
 1d8:	82 2b       	or	r24, r18
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	08 95       	ret
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_WritePin+0x3c>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_WritePin+0x38>
 1ee:	82 2b       	or	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_WritePin+0x52>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_WritePin+0x4e>
 204:	82 2b       	or	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_WritePin+0x68>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_WritePin+0x64>
 21a:	82 2b       	or	r24, r18
 21c:	82 bb       	out	0x12, r24	; 18
 21e:	08 95       	ret
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 f0       	breq	.+36     	; 0x248 <DIO_WritePin+0x9a>
 224:	28 f0       	brcs	.+10     	; 0x230 <DIO_WritePin+0x82>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	d9 f0       	breq	.+54     	; 0x260 <DIO_WritePin+0xb2>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	29 f1       	breq	.+74     	; 0x278 <DIO_WritePin+0xca>
 22e:	08 95       	ret
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_WritePin+0x8e>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_WritePin+0x8a>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	8b bb       	out	0x1b, r24	; 27
 246:	08 95       	ret
 248:	28 b3       	in	r18, 0x18	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_WritePin+0xa6>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_WritePin+0xa2>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	08 95       	ret
 260:	25 b3       	in	r18, 0x15	; 21
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_WritePin+0xbe>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_WritePin+0xba>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	85 bb       	out	0x15, r24	; 21
 276:	08 95       	ret
 278:	22 b3       	in	r18, 0x12	; 18
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_WritePin+0xd6>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_WritePin+0xd2>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret

00000290 <DIO_ReadPin>:



void DIO_ReadPin (uint8 Port ,uint8 Pin, uint8* Val)
{
	switch (Port)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	89 f0       	breq	.+34     	; 0x2b6 <DIO_ReadPin+0x26>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <DIO_ReadPin+0x10>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	c9 f0       	breq	.+50     	; 0x2cc <DIO_ReadPin+0x3c>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	11 f1       	breq	.+68     	; 0x2e2 <DIO_ReadPin+0x52>
 29e:	08 95       	ret
			{
			case DIO_PORTA :

				*Val =  GET_BIT(PINA,Pin);
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_ReadPin+0x1a>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_ReadPin+0x16>
 2ae:	81 70       	andi	r24, 0x01	; 1
 2b0:	fa 01       	movw	r30, r20
 2b2:	80 83       	st	Z, r24

				break;
 2b4:	08 95       	ret

			case DIO_PORTB :

				*Val = GET_BIT(PINB,Pin);
 2b6:	86 b3       	in	r24, 0x16	; 22
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_ReadPin+0x30>
 2bc:	95 95       	asr	r25
 2be:	87 95       	ror	r24
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_ReadPin+0x2c>
 2c4:	81 70       	andi	r24, 0x01	; 1
 2c6:	fa 01       	movw	r30, r20
 2c8:	80 83       	st	Z, r24

				break;
 2ca:	08 95       	ret

			case DIO_PORTC :

				*Val = GET_BIT(PINC,Pin);
 2cc:	83 b3       	in	r24, 0x13	; 19
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_ReadPin+0x46>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_ReadPin+0x42>
 2da:	81 70       	andi	r24, 0x01	; 1
 2dc:	fa 01       	movw	r30, r20
 2de:	80 83       	st	Z, r24

				break;
 2e0:	08 95       	ret

			case DIO_PORTD :

				*Val = GET_BIT(PIND,Pin);
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_ReadPin+0x5c>
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_ReadPin+0x58>
 2f0:	81 70       	andi	r24, 0x01	; 1
 2f2:	fa 01       	movw	r30, r20
 2f4:	80 83       	st	Z, r24
 2f6:	08 95       	ret

000002f8 <DIO_SetPullUp>:



void DIO_SetPullUp(uint8 Port ,uint8 Pin )
{
	switch(Port)
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	89 f0       	breq	.+34     	; 0x31e <DIO_SetPullUp+0x26>
 2fc:	28 f0       	brcs	.+10     	; 0x308 <DIO_SetPullUp+0x10>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	c9 f0       	breq	.+50     	; 0x334 <DIO_SetPullUp+0x3c>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	11 f1       	breq	.+68     	; 0x34a <DIO_SetPullUp+0x52>
 306:	08 95       	ret
	{

		case DIO_PORTA :

		SET_BIT(PORTA,Pin);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_SetPullUp+0x1c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_SetPullUp+0x18>
 318:	82 2b       	or	r24, r18
 31a:	8b bb       	out	0x1b, r24	; 27

		break;
 31c:	08 95       	ret

		case DIO_PORTB :

		SET_BIT(PORTB,Pin);
 31e:	28 b3       	in	r18, 0x18	; 24
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPullUp+0x32>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPullUp+0x2e>
 32e:	82 2b       	or	r24, r18
 330:	88 bb       	out	0x18, r24	; 24

		break;
 332:	08 95       	ret

		case DIO_PORTC :

		SET_BIT(PORTC,Pin);
 334:	25 b3       	in	r18, 0x15	; 21
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPullUp+0x48>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPullUp+0x44>
 344:	82 2b       	or	r24, r18
 346:	85 bb       	out	0x15, r24	; 21

		break;
 348:	08 95       	ret

		case DIO_PORTD :

		SET_BIT(PORTD,Pin);
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_SetPullUp+0x5e>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_SetPullUp+0x5a>
 35a:	82 2b       	or	r24, r18
 35c:	82 bb       	out	0x12, r24	; 18
 35e:	08 95       	ret

00000360 <KeyPad_Init>:



void KeyPad_Init(void)
{
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_0, DIO_PIN_OUTPUT);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_1, DIO_PIN_OUTPUT);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_2, DIO_PIN_OUTPUT);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_COLUM_3, DIO_PIN_OUTPUT);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_0, DIO_PIN_INPUT);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	64 e0       	ldi	r22, 0x04	; 4
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_1, DIO_PIN_INPUT);
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_2, DIO_PIN_INPUT);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	66 e0       	ldi	r22, 0x06	; 6
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	DIO_SetPinDir(KEYPAD_PORT ,KEYPAD_ROW_3, DIO_PIN_INPUT);
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	67 e0       	ldi	r22, 0x07	; 7
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
	
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_0 );
 3b0:	64 e0       	ldi	r22, 0x04	; 4
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_1 );
 3b8:	65 e0       	ldi	r22, 0x05	; 5
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_2 );
 3c0:	66 e0       	ldi	r22, 0x06	; 6
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_SetPullUp>
	DIO_SetPullUp(KEYPAD_PORT ,KEYPAD_ROW_3 );
 3c8:	67 e0       	ldi	r22, 0x07	; 7
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_SetPullUp>
	
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_0, DIO_PIN_HIGH);
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	83 e0       	ldi	r24, 0x03	; 3
 3d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_1, DIO_PIN_HIGH);
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_2, DIO_PIN_HIGH);
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
	DIO_WritePin(KEYPAD_PORT ,KEYPAD_COLUM_3, DIO_PIN_HIGH);
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 3f8:	08 95       	ret

000003fa <KeyPad_GetValue>:
	
}

uint8 KeyPad_GetValue(void)
{
 3fa:	bf 92       	push	r11
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	1f 92       	push	r1
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
	
	uint8 LOC_ROW = 0;
	
	uint8 Value = 0;
	
	uint8 Temp = 0;
 412:	19 82       	std	Y+1, r1	; 0x01
 414:	0f 2e       	mov	r0, r31
 416:	f0 e6       	ldi	r31, 0x60	; 96
 418:	cf 2e       	mov	r12, r31
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	df 2e       	mov	r13, r31
 41e:	f0 2d       	mov	r31, r0
	
	uint8 LOC_Coloum = 0;
	
	uint8 LOC_ROW = 0;
	
	uint8 Value = 0;
 420:	b1 2c       	mov	r11, r1
	
	uint8 Temp = 0;
	
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
 422:	00 e0       	ldi	r16, 0x00	; 0
	{
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_LOW);
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	60 2f       	mov	r22, r16
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 42e:	76 01       	movw	r14, r12
		
		for(LOC_ROW = ROW_INIT ; LOC_ROW <= ROW_FINAL ; LOC_ROW++)
 430:	14 e0       	ldi	r17, 0x04	; 4
		{
			
			DIO_ReadPin (KEYPAD_PORT ,LOC_ROW , &Temp);
 432:	ae 01       	movw	r20, r28
 434:	4f 5f       	subi	r20, 0xFF	; 255
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	61 2f       	mov	r22, r17
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 48 01 	call	0x290	; 0x290 <DIO_ReadPin>
			
			if(!Temp)
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	81 11       	cpse	r24, r1
 444:	12 c0       	rjmp	.+36     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			{
				Value = KeyPad_Vlues[LOC_ROW - ROW_INIT][LOC_Coloum - COL_INIT];
 446:	f7 01       	movw	r30, r14
 448:	b0 80       	ld	r11, Z
				
				while(!Temp)
				{
					DIO_ReadPin (KEYPAD_PORT ,LOC_ROW , &Temp);
 44a:	ae 01       	movw	r20, r28
 44c:	4f 5f       	subi	r20, 0xFF	; 255
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	61 2f       	mov	r22, r17
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 48 01 	call	0x290	; 0x290 <DIO_ReadPin>
			
			if(!Temp)
			{
				Value = KeyPad_Vlues[LOC_ROW - ROW_INIT][LOC_Coloum - COL_INIT];
				
				while(!Temp)
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	88 23       	and	r24, r24
 45c:	b1 f3       	breq	.-20     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45e:	8f e3       	ldi	r24, 0x3F	; 63
 460:	9c e9       	ldi	r25, 0x9C	; 156
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
	{
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_LOW);
		
		for(LOC_ROW = ROW_INIT ; LOC_ROW <= ROW_FINAL ; LOC_ROW++)
 46a:	1f 5f       	subi	r17, 0xFF	; 255
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	e9 0e       	add	r14, r25
 470:	f1 1c       	adc	r15, r1
 472:	18 30       	cpi	r17, 0x08	; 8
 474:	f1 f6       	brne	.-68     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				_delay_ms(10);
			}
			
		}
		
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_HIGH);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	60 2f       	mov	r22, r16
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
	
	uint8 Value = 0;
	
	uint8 Temp = 0;
	
	for(LOC_Coloum = COL_INIT ; LOC_Coloum <= COL_FINAL ; LOC_Coloum++)
 480:	0f 5f       	subi	r16, 0xFF	; 255
 482:	ef ef       	ldi	r30, 0xFF	; 255
 484:	ce 1a       	sub	r12, r30
 486:	de 0a       	sbc	r13, r30
 488:	04 30       	cpi	r16, 0x04	; 4
 48a:	61 f6       	brne	.-104    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		DIO_WritePin(KEYPAD_PORT ,LOC_Coloum , DIO_PIN_HIGH);
	}
	
	return Value ;
	
}
 48c:	8b 2d       	mov	r24, r11
 48e:	0f 90       	pop	r0
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	08 95       	ret

000004a4 <LCD_WriteCommand>:
{
	uint8 pos[2] = {0x80 , 0xC0};
	
	LCD_WriteCommand(pos[row]+col);
	
}
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 4c6:	8b b3       	in	r24, 0x1b	; 27
 4c8:	9c 2f       	mov	r25, r28
 4ca:	90 7f       	andi	r25, 0xF0	; 240
 4cc:	8f 70       	andi	r24, 0x0F	; 15
 4ce:	89 2b       	or	r24, r25
 4d0:	8b bb       	out	0x1b, r24	; 27
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	63 e0       	ldi	r22, 0x03	; 3
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 4dc:	8f e9       	ldi	r24, 0x9F	; 159
 4de:	9f e0       	ldi	r25, 0x0F	; 15
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_WriteCommand+0x3c>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_WriteCommand+0x42>
 4e6:	00 00       	nop
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 4f2:	2b b3       	in	r18, 0x1b	; 27
 4f4:	30 e1       	ldi	r19, 0x10	; 16
 4f6:	c3 9f       	mul	r28, r19
 4f8:	c0 01       	movw	r24, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	92 2f       	mov	r25, r18
 4fe:	9f 70       	andi	r25, 0x0F	; 15
 500:	89 2b       	or	r24, r25
 502:	8b bb       	out	0x1b, r24	; 27
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 50e:	8f e9       	ldi	r24, 0x9F	; 159
 510:	9f e0       	ldi	r25, 0x0F	; 15
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <LCD_WriteCommand+0x6e>
 516:	00 c0       	rjmp	.+0      	; 0x518 <LCD_WriteCommand+0x74>
 518:	00 00       	nop
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 524:	8f e1       	ldi	r24, 0x1F	; 31
 526:	9e e4       	ldi	r25, 0x4E	; 78
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_WriteCommand+0x84>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_WriteCommand+0x8a>
 52e:	00 00       	nop
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <LCD_Init>:
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	62 e0       	ldi	r22, 0x02	; 2
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	63 e0       	ldi	r22, 0x03	; 3
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	64 e0       	ldi	r22, 0x04	; 4
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	65 e0       	ldi	r22, 0x05	; 5
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	66 e0       	ldi	r22, 0x06	; 6
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	67 e0       	ldi	r22, 0x07	; 7
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 66 00 	call	0xcc	; 0xcc <DIO_SetPinDir>
 57a:	2f ef       	ldi	r18, 0xFF	; 255
 57c:	81 ee       	ldi	r24, 0xE1	; 225
 57e:	94 e0       	ldi	r25, 0x04	; 4
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <LCD_Init+0x4c>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_Init+0x56>
 58a:	00 00       	nop
 58c:	83 e3       	ldi	r24, 0x33	; 51
 58e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 592:	82 e3       	ldi	r24, 0x32	; 50
 594:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 598:	88 e2       	ldi	r24, 0x28	; 40
 59a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 59e:	8c e0       	ldi	r24, 0x0C	; 12
 5a0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 5aa:	86 e0       	ldi	r24, 0x06	; 6
 5ac:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 5b6:	08 95       	ret

000005b8 <LCD_WriteChar>:
 5b8:	cf 93       	push	r28
 5ba:	c8 2f       	mov	r28, r24
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	63 e0       	ldi	r22, 0x03	; 3
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 5da:	8c 2f       	mov	r24, r28
 5dc:	80 7f       	andi	r24, 0xF0	; 240
 5de:	8b bb       	out	0x1b, r24	; 27
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	63 e0       	ldi	r22, 0x03	; 3
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 5ea:	8f e9       	ldi	r24, 0x9F	; 159
 5ec:	9f e0       	ldi	r25, 0x0F	; 15
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_WriteChar+0x36>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_WriteChar+0x3c>
 5f4:	00 00       	nop
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	63 e0       	ldi	r22, 0x03	; 3
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 600:	c2 95       	swap	r28
 602:	c0 7f       	andi	r28, 0xF0	; 240
 604:	cb bb       	out	0x1b, r28	; 27
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	63 e0       	ldi	r22, 0x03	; 3
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 610:	8f e9       	ldi	r24, 0x9F	; 159
 612:	9f e0       	ldi	r25, 0x0F	; 15
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_WriteChar+0x5c>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_WriteChar+0x62>
 61a:	00 00       	nop
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	63 e0       	ldi	r22, 0x03	; 3
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_WritePin>
 626:	8f e1       	ldi	r24, 0x1F	; 31
 628:	9e e4       	ldi	r25, 0x4E	; 78
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_WriteChar+0x72>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_WriteChar+0x78>
 630:	00 00       	nop
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <LCD_WriteString>:
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	fc 01       	movw	r30, r24
 63e:	80 81       	ld	r24, Z
 640:	88 23       	and	r24, r24
 642:	59 f0       	breq	.+22     	; 0x65a <LCD_WriteString+0x24>
 644:	8f 01       	movw	r16, r30
 646:	c0 e0       	ldi	r28, 0x00	; 0
 648:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_WriteChar>
 64c:	cf 5f       	subi	r28, 0xFF	; 255
 64e:	f8 01       	movw	r30, r16
 650:	ec 0f       	add	r30, r28
 652:	f1 1d       	adc	r31, r1
 654:	80 81       	ld	r24, Z
 656:	81 11       	cpse	r24, r1
 658:	f7 cf       	rjmp	.-18     	; 0x648 <LCD_WriteString+0x12>
 65a:	cf 91       	pop	r28
 65c:	1f 91       	pop	r17
 65e:	0f 91       	pop	r16
 660:	08 95       	ret

00000662 <LCD_Clear>:



void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_WriteCommand>
 668:	08 95       	ret

0000066a <LCD_WriteInteger>:
}



void LCD_WriteInteger (sint32 num )
{
 66a:	8f 92       	push	r8
 66c:	9f 92       	push	r9
 66e:	af 92       	push	r10
 670:	bf 92       	push	r11
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	6b 01       	movw	r12, r22
 67c:	7c 01       	movw	r14, r24
	sint32 Temp =1; 
	if (num < 0 )
 67e:	99 23       	and	r25, r25
 680:	5c f4       	brge	.+22     	; 0x698 <LCD_WriteInteger+0x2e>
	{
		LCD_WriteChar('-'); 
 682:	8d e2       	ldi	r24, 0x2D	; 45
 684:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_WriteChar>
		num  *= -1 ; 
 688:	f0 94       	com	r15
 68a:	e0 94       	com	r14
 68c:	d0 94       	com	r13
 68e:	c0 94       	com	r12
 690:	c1 1c       	adc	r12, r1
 692:	d1 1c       	adc	r13, r1
 694:	e1 1c       	adc	r14, r1
 696:	f1 1c       	adc	r15, r1
		 
}
while (num > 0 )
 698:	1c 14       	cp	r1, r12
 69a:	1d 04       	cpc	r1, r13
 69c:	1e 04       	cpc	r1, r14
 69e:	1f 04       	cpc	r1, r15
 6a0:	a4 f4       	brge	.+40     	; 0x6ca <LCD_WriteInteger+0x60>
{
	(Temp * 10 ) + num / 10 ; 
	num /=  10 ; 
 6a2:	0f 2e       	mov	r0, r31
 6a4:	fa e0       	ldi	r31, 0x0A	; 10
 6a6:	8f 2e       	mov	r8, r31
 6a8:	91 2c       	mov	r9, r1
 6aa:	a1 2c       	mov	r10, r1
 6ac:	b1 2c       	mov	r11, r1
 6ae:	f0 2d       	mov	r31, r0
 6b0:	c7 01       	movw	r24, r14
 6b2:	b6 01       	movw	r22, r12
 6b4:	a5 01       	movw	r20, r10
 6b6:	94 01       	movw	r18, r8
 6b8:	0e 94 9e 03 	call	0x73c	; 0x73c <__divmodsi4>
 6bc:	69 01       	movw	r12, r18
 6be:	7a 01       	movw	r14, r20
	{
		LCD_WriteChar('-'); 
		num  *= -1 ; 
		 
}
while (num > 0 )
 6c0:	12 16       	cp	r1, r18
 6c2:	13 06       	cpc	r1, r19
 6c4:	14 06       	cpc	r1, r20
 6c6:	15 06       	cpc	r1, r21
 6c8:	9c f3       	brlt	.-26     	; 0x6b0 <LCD_WriteInteger+0x46>
{
	LCD_WriteChar((Temp % 10 ) + 48 ) ; 
	Temp /= 10 ; 
}

 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	bf 90       	pop	r11
 6d4:	af 90       	pop	r10
 6d6:	9f 90       	pop	r9
 6d8:	8f 90       	pop	r8
 6da:	08 95       	ret

000006dc <main>:
#include "Temp_sensor.h"
#define F_CPU 16000000
#include <util/delay.h>

int main(void)
{
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	1f 92       	push	r1
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	uint8 Temp = 0;
 6e6:	19 82       	std	Y+1, r1	; 0x01
   uint8 Pass ,x = 10 ; 	
	
	LCD_Init();
 6e8:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_Init>
	Temp_sensor_Init(); 
 6ec:	0e 94 98 03 	call	0x730	; 0x730 <Temp_sensor_Init>
	KeyPad_Init() ; 
 6f0:	0e 94 b0 01 	call	0x360	; 0x360 <KeyPad_Init>
	
	
	while (1)
	{
Temp_sensor_Read(&Temp); 
 6f4:	ce 01       	movw	r24, r28
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	0e 94 9b 03 	call	0x736	; 0x736 <Temp_sensor_Read>

LCD_Clear () ;
 6fc:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Clear>

 Temp = KeyPad_GetValue();
 700:	0e 94 fd 01 	call	0x3fa	; 0x3fa <KeyPad_GetValue>
 704:	89 83       	std	Y+1, r24	; 0x01

 if(Temp)
 706:	88 23       	and	r24, r24
 708:	31 f0       	breq	.+12     	; 0x716 <main+0x3a>
 {
	 LCD_WriteInteger(Temp);
 70a:	68 2f       	mov	r22, r24
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 35 03 	call	0x66a	; 0x66a <LCD_WriteInteger>



while (x!=0 )
{
	LCD_WriteString("PASSWORD PLEASE");
 716:	80 e7       	ldi	r24, 0x70	; 112
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_WriteString>
	if (Pass = 654321 )
	{
		LCD_WriteString("PASSWORD IS CORRECT ");
 71e:	80 e8       	ldi	r24, 0x80	; 128
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 1b 03 	call	0x636	; 0x636 <LCD_WriteString>
		Temp_sensor_Read ( &Temp ) ;
 726:	ce 01       	movw	r24, r28
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	0e 94 9b 03 	call	0x736	; 0x736 <Temp_sensor_Read>
 72e:	f3 cf       	rjmp	.-26     	; 0x716 <main+0x3a>

00000730 <Temp_sensor_Init>:
 */ 
#include "Temp_sensor.h"

void Temp_sensor_Init (void) 
{
	ADC_Init(); 
 730:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 734:	08 95       	ret

00000736 <Temp_sensor_Read>:
}
void Temp_sensor_Read (uint16* Temp)
{
	ADC_Read(Temp);
 736:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
 73a:	08 95       	ret

0000073c <__divmodsi4>:
 73c:	05 2e       	mov	r0, r21
 73e:	97 fb       	bst	r25, 7
 740:	1e f4       	brtc	.+6      	; 0x748 <__divmodsi4+0xc>
 742:	00 94       	com	r0
 744:	0e 94 b5 03 	call	0x76a	; 0x76a <__negsi2>
 748:	57 fd       	sbrc	r21, 7
 74a:	07 d0       	rcall	.+14     	; 0x75a <__divmodsi4_neg2>
 74c:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodsi4>
 750:	07 fc       	sbrc	r0, 7
 752:	03 d0       	rcall	.+6      	; 0x75a <__divmodsi4_neg2>
 754:	4e f4       	brtc	.+18     	; 0x768 <__divmodsi4_exit>
 756:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__negsi2>

0000075a <__divmodsi4_neg2>:
 75a:	50 95       	com	r21
 75c:	40 95       	com	r20
 75e:	30 95       	com	r19
 760:	21 95       	neg	r18
 762:	3f 4f       	sbci	r19, 0xFF	; 255
 764:	4f 4f       	sbci	r20, 0xFF	; 255
 766:	5f 4f       	sbci	r21, 0xFF	; 255

00000768 <__divmodsi4_exit>:
 768:	08 95       	ret

0000076a <__negsi2>:
 76a:	90 95       	com	r25
 76c:	80 95       	com	r24
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__udivmodsi4>:
 77a:	a1 e2       	ldi	r26, 0x21	; 33
 77c:	1a 2e       	mov	r1, r26
 77e:	aa 1b       	sub	r26, r26
 780:	bb 1b       	sub	r27, r27
 782:	fd 01       	movw	r30, r26
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <__udivmodsi4_ep>

00000786 <__udivmodsi4_loop>:
 786:	aa 1f       	adc	r26, r26
 788:	bb 1f       	adc	r27, r27
 78a:	ee 1f       	adc	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	a2 17       	cp	r26, r18
 790:	b3 07       	cpc	r27, r19
 792:	e4 07       	cpc	r30, r20
 794:	f5 07       	cpc	r31, r21
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__udivmodsi4_ep>
 798:	a2 1b       	sub	r26, r18
 79a:	b3 0b       	sbc	r27, r19
 79c:	e4 0b       	sbc	r30, r20
 79e:	f5 0b       	sbc	r31, r21

000007a0 <__udivmodsi4_ep>:
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a 94       	dec	r1
 7aa:	69 f7       	brne	.-38     	; 0x786 <__udivmodsi4_loop>
 7ac:	60 95       	com	r22
 7ae:	70 95       	com	r23
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	9b 01       	movw	r18, r22
 7b6:	ac 01       	movw	r20, r24
 7b8:	bd 01       	movw	r22, r26
 7ba:	cf 01       	movw	r24, r30
 7bc:	08 95       	ret

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
